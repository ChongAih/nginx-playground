# START docker containers
# open the docker apps (ui) to start docker daemon
# alias docker="/usr/local/Cellar/docker/20.10.7/bin/docker"
# cd /Users/chongaih.hau/Desktop/javascript_playground/docker && docker build -t nodeapp . --> nodeapp is the tag name
# docker run --name nodeapp -p 9999:9999 nodeapp --> nodeapp is the tag name
# http://localhost:9999/, http://localhost:9999/app1, http://localhost:9999/app2, http://localhost:9999/admin
# docker ps --> show all containers
# docker stop <container idi>

# START 4 docker containers after docker build
# docker run -p 2222:9999 -e APPID=2222 -d nodeapp
# docker run -p 3333:9999 -e APPID=3333 -d nodeapp
# docker run -p 4444:9999 -e APPID=4444 -d nodeapp
# docker run -p 5555:9999 -e APPID=5555 -d nodeapp

# START nginx server
# nginx --> if nginx server is not up / nginx -s reload --> if nginx server is already up
# http://localhost:8080/ or admin or app1 or app2 --> observe round robin
# http://localhost:8080/app1, http://localhost:8080/app2 --> observe round robin
# http://localhost:8080/admin --> block

# only layer 7 can use location
http {
  # create upstream backend
  upstream allbackend {
    # default load balancing algorithm - round robin
    # ip_hash - use hash algorithm - stateful --> need to store the ip and its assigned server
    # ip_hash; # sticky

    # add all the available servers
    server 127.0.0.1:2222;
    server 127.0.0.1:3333;
    server 127.0.0.1:4444;
    server 127.0.0.1:5555;
  }

  # split load
  upstream app1backend {
    server 127.0.0.1:2222;
    server 127.0.0.1:3333;
  }

  upstream app2backend {
    server 127.0.0.1:4444;
    server 127.0.0.1:5555;
  }

  server {
    listen 8080;
    location / {
      proxy_pass http://allbackend/;
    }

    # round robin between 2 servers
    location /app1 {
      proxy_pass http://app1backend/;
    }

    location /app2 {
      proxy_pass http://app2backend/;
    }

    # forbid access to admin
    location /admin {
      return 403;
    }
  }


}

events {}